// --------------------------------------------------------------------
// Copyright (c) 2011 by Terasic Technologies Inc. 
// --------------------------------------------------------------------
//
// Permission:
//
//   Terasic grants permission to use and modify this code for use
//   in synthesis for all Terasic Development Boards and Altera Development 
//   Kits made by Terasic.  Other use of this code, including the selling 
//   ,duplication, or modification of any portion is strictly prohibited.
//
// Disclaimer:
//
//   This VHDL/Verilog or C/C++ source code is intended as a design reference
//   which illustrates how these types of functions can be implemented.
//   It is the user's responsibility to verify their design for
//   consistency and functionality through the use of formal
//   verification methods.  Terasic provides no warranty regarding the use 
//   or functionality of this code.
//
// --------------------------------------------------------------------
//           
//                     Terasic Technologies Inc
//                     356 Fu-Shin E. Rd Sec. 1. JhuBei City,
//                     HsinChu County, Taiwan
//                     302
//
//                     web: http://www.terasic.com/
//                     email: support@terasic.com
//
// --------------------------------------------------------------------
//
// Major Functions:  USB device process code
// --------------------------------------------------------------------
//
// Revision History :
// --------------------------------------------------------------------
//   Ver  :| Author            :| Mod. Date :| Changes Made:
//   V1.0 :| Dee Zeng          :| 07/05/2011:| Initial Revision
// --------------------------------------------------------------------
#include "./../terasic_includes.h"
#include "usb_device.h"
#include "usb_hal.h"
#include "67200_cmd_data.h"
#include "67200.h"
#include "usb_device_control.h"
//#include "./../LCD.h"
#include "sys/alt_alarm.h" // time tick function (alt_nticks(), alt_ticks_per_second())
//#include <altera_up_sd_card_avalon_interface.h>

extern DEVICE_STATUS device_status;
char file_name[30] = "p0.bmp";
int wrData = 0;
int count = 0;
int imagenWr = 0;
short buf[4];

#ifdef DEBUG_USBDEV_CTL
    #define DEBUG_OUT(format, arg...) { {printf("[USBDC]");printf(format, ## arg);}}
    #define DEBUG_ERR(format, arg...) {{printf("[USBDC_ERR]");printf(format, ## arg);}}
#else
    #define DEBUG_OUT(format, arg...) 
    #define DEBUG_ERR(format, arg...)
#endif   

/** internal functions **/
static void ep2_isr(void);

/*
 *  FUNCTION: dcProcessEvent
 *
 *  PARAMETERS:   void
 * 
 *  DESCRIPTION:
 *    This function read the SIE2 MSG and hanlder it
 *
 *  RETURNS:  void
 */
void dcProcessEvent(void){
      /*******************************************************
       *  The interrupt (HPI_INT) flow
       *  1 : interrupt occured
       *  2 : read the  HPI interrupt status register
       *  3 : handle it according it 
       *  3.1 :  MBX_OUT_FLG   it indicates there is mailbox msg
       *        so read mailbox and handle it 
       *  3.2 :  SIE2MSG     it indicates there is SIE2 msg
       *      so read SIE2 msg register and handle it
       *  3.x   others  
       */
       
        // a loop checker is enough in this demo
                    alt_u16 message;
                    // See which endpoint is interrupting
                    hpi_read_reg(HPI_SIE2_MSG_ADR,(alt_u16 *)&message);
                    
                    if(message)  hpi_write_reg(HPI_SIE2_MSG_ADR, 0);  //clear the sie mailbox
                    
                    //handle which necessary
                    message &= (SUSB_EP1_MSG | SUSB_EP2_MSG | SUSB_RST_MSG | SUSB_CFG_MSG | SUSB_CLASS_MSG | SUSB_SUS_MSG);
                  
                    if(message) 
                    {
                        sie2_msg_handler( message); //loop while msg = 0
                    }

}
                    





/*
 *  FUNCTION: sie2_msg_handler
 *
 *  PARAMETERS:   message
 * 
 *  DESCRIPTION:
 *    This function  handle the SIE2 message
 *
 *  RETURNS:  void
 */
void sie2_msg_handler(unsigned short message)
{
  alt_u32 Timeout;
	  while(message) {
       
            if(message & SUSB_RST_MSG)
             {
              DEBUG_OUT("[sie2 msg]:SUSB_RST_MSG\n");


       	         Timeout = alt_nticks() + alt_ticks_per_second()/3;
                 while((hpi_command(COMM_RESET)!= SUCCESS)&&  alt_nticks()<Timeout){
           	        usleep(1000)  ;
                 }
                 if(alt_nticks()>Timeout){
           	          DEBUG_OUT("device COMM_RESET failed\n");
                 }else{
           	          DEBUG_OUT("device COMM_RESET success !!\n");
                 }
             }
             if(message & SUSB_SOF_MSG)
             {
              DEBUG_OUT("[sie2 msg]:SUSB_SOF_MSG\n");
              // do something
             }
             
            if(message & SUSB_CFG_MSG)
               {
               DEBUG_OUT("[sie2 msg]:SUSB_CFG_MSG\n");
               
               dc_init_struct();

               usb_enable_receive_data(2,EP2_RECEIVE_BUF_ADDRESS,EP2_DATA_DEFAULT_LEN);
              }

         if(message & SUSB_SUS_MSG)
           {
            DEBUG_OUT("[sie2 msg]:SUSB_SUS_MSG\n");
            // do something
           }
       
       
           if(message & SUSB_EP0_MSG)
            {
              DEBUG_OUT("[sie2 msg]:ep0 msg\n");
              /* ignore ep0 */
            }
           if(message & SUSB_EP1_MSG)
            {
              DEBUG_OUT("[sie2 msg]: ep1 msg: data had been received by host\n");
              device_status.bEP1InTransfer = FALSE ;
            }
           if(message & SUSB_EP2_MSG)
            {
              //DEBUG_OUT("[sie2 msg]:ep2 msg: receiving host data \n");
              device_status.bEP2InTransfer = FALSE ;
              ep2_isr();
              usb_enable_receive_data(2,EP2_RECEIVE_BUF_ADDRESS,EP2_DATA_DEFAULT_LEN);
            }
              if(message & SUSB_EP3_MSG)
            {
              DEBUG_OUT("[sie2 msg]:ep3 msg\n");
              // do something
            }
               if(message & SUSB_EP4_MSG)
            {
              DEBUG_OUT("[sie2 msg]:ep4 msg\n");
              // do something
            }
           if(message & SUSB_EP5_MSG)
            {
              DEBUG_OUT("[sie2 msg]:ep5 msg\n");
              // do something
            }
              if(message & SUSB_EP6_MSG)
            {
              DEBUG_OUT("[sie2 msg]:ep6 msg\n");
              // do something
            }
            if(message & SUSB_EP7_MSG)
            {
              DEBUG_OUT("[sie2 msg]:ep7 msg\n");
              // do something
            }

              hpi_read_reg(HPI_SIE2_MSG_ADR,(alt_u16 *)&message);
              
              if(message)  hpi_write_reg(HPI_SIE2_MSG_ADR, 0);
              
              message &= (SUSB_EP1_MSG | SUSB_EP2_MSG | SUSB_RST_MSG | SUSB_CFG_MSG | SUSB_CLASS_MSG | SUSB_SUS_MSG);
       }
}


/*
 *  FUNCTION: ep2_isr
 *
 *  PARAMETERS:   void
 * 
 *  DESCRIPTION:
 *    This function  handle the endpoint 2 packet
 *
 *  RETURNS:  void
 */
 void ep2_isr(void)
 {
    /*****************************************************************
     * endpoint 2 OUT(host to device ) data form
     *     1 word type    |   data packet
     * ---------------------------------------
     *****************************************************************/

   alt_u16 Rx_type; 
   
   Rx_type = hpi_read_word(EP2_RECEIVE_BUF_ADDRESS); // read the first word, we defined as type
   
   //if(Rx_type == 00)

   if(!wrData){

	    switch( Rx_type )    {

	        case IMAGEN1:
	         {   short SiAbierto;
	        	 unsigned char peticion;

	         	 DEBUG_OUT(" Caso: Imagen 0\n");
	         	 SiAbierto = alt_up_sd_card_fopen("p0.bmp", 0);

	         	 if(SiAbierto == -1){

	         		 DEBUG_OUT(" La imagen 0 no se encuentra en SD!\n");
	         		 DEBUG_OUT(" Enviado petición de escritura de la imagen...\n");

	         		 peticion = 0x11;

	         		 usb_send_data(1,EP1_SEND_BUF_ADDRESS,&peticion,1);

	                 device_status.EP1_Transfer_Timeout  = alt_nticks() + alt_ticks_per_second()*1; // 2s TimeOut if host do not responds
	                 device_status.bEP1_Transfer_Judge   = TRUE;

	                 if(alt_nticks()>device_status.EP1_Transfer_Timeout &&  device_status.bEP1_Transfer_Judge == TRUE && device_status.bEP1InTransfer == TRUE){
	                	   device_status.bEP1InTransfer = FALSE;
	                	   device_status.bEP1_Transfer_Judge = FALSE;
	                       DEBUG_OUT("Host PC not responds ,TimeOut!!\n");
	                 }

	         	 }else{
	         		 if(SiAbierto == -2){
	         			DEBUG_OUT(" Error al abrir la imagen, esta ya se encuentra abierta!\n");
	         		 }else{
	         			 DEBUG_OUT(" La imagen 0 ya se encuentra en SD!\n");
	         			 DEBUG_OUT(" Enviado confirmación de imagen...\n");

	         			 peticion = 0x00;

	         			 usb_send_data(1,EP1_SEND_BUF_ADDRESS,&peticion,1);
	         			 device_status.EP1_Transfer_Timeout  = alt_nticks() + alt_ticks_per_second()*1; // 2s TimeOut if host do not responds
	         			 device_status.bEP1_Transfer_Judge   = TRUE;

	         			 if(alt_nticks()>device_status.EP1_Transfer_Timeout &&  device_status.bEP1_Transfer_Judge == TRUE && device_status.bEP1InTransfer == TRUE){
	         			    	   device_status.bEP1InTransfer = FALSE;
	         			       	   device_status.bEP1_Transfer_Judge = FALSE;
	         			           DEBUG_OUT("Host PC not responds ,TimeOut!!\n");
	         			 }
	         		 }
	         	 }
	         	//usb_enable_receive_data(2,EP2_RECEIVE_BUF_ADDRESS,EP2_DATA_DEFAULT_LEN);
	         	 break;
	         }

	          case IMAGEN2:
	          {   short SiAbierto;
	         	 unsigned char peticion;

	          	 DEBUG_OUT(" Caso: Imagen 1\n");
	          	 SiAbierto = alt_up_sd_card_fopen("p1.bmp", 0);

	          	 if(SiAbierto == -1){

	          		 DEBUG_OUT(" La imagen 1 no se encuentra en SD!\n");
	          		 DEBUG_OUT(" Enviado petición de escritura de la imagen...\n");

	          		 peticion = 0x12;

	          		 usb_send_data(1,EP1_SEND_BUF_ADDRESS,&peticion,1);

	                  device_status.EP1_Transfer_Timeout  = alt_nticks() + alt_ticks_per_second()*1; // 2s TimeOut if host do not responds
	                  device_status.bEP1_Transfer_Judge   = TRUE;

	                  if(alt_nticks()>device_status.EP1_Transfer_Timeout &&  device_status.bEP1_Transfer_Judge == TRUE && device_status.bEP1InTransfer == TRUE){
	                 	   device_status.bEP1InTransfer = FALSE;
	                 	   device_status.bEP1_Transfer_Judge = FALSE;
	                        DEBUG_OUT("Host PC not responds ,TimeOut!!\n");
	                  }

	          	 }else{
	          		 if(SiAbierto == -2){
	          			DEBUG_OUT(" Error al abrir la imagen, esta ya se encuentra abierta!\n");
	          		 }else{
	          			 DEBUG_OUT(" La imagen 1 ya se encuentra en SD!\n");
	          			 DEBUG_OUT(" Enviado petición de confirmación de imagen...\n");

	          			 peticion = 0x00;

	          			 usb_send_data(1,EP1_SEND_BUF_ADDRESS,&peticion,1);
	          			 device_status.EP1_Transfer_Timeout  = alt_nticks() + alt_ticks_per_second()*1; // 2s TimeOut if host do not responds
	          			 device_status.bEP1_Transfer_Judge   = TRUE;

	          			 if(alt_nticks()>device_status.EP1_Transfer_Timeout &&  device_status.bEP1_Transfer_Judge == TRUE && device_status.bEP1InTransfer == TRUE){
	          			    	   device_status.bEP1InTransfer = FALSE;
	          			       	   device_status.bEP1_Transfer_Judge = FALSE;
	          			           DEBUG_OUT("Host PC not responds ,TimeOut!!\n");
	          			 }
	          		 }
	          	 }
	          	//usb_enable_receive_data(2,EP2_RECEIVE_BUF_ADDRESS,EP2_DATA_DEFAULT_LEN);
	          	 break;
	          }

	          case IMAGEN3:
	          {   short SiAbierto;
	         	 unsigned char peticion;

	          	 DEBUG_OUT(" Caso: Imagen 2\n");
	          	 SiAbierto = alt_up_sd_card_fopen("p2.bmp", 0);

	          	 if(SiAbierto == -1){

	          		 DEBUG_OUT(" La imagen 2 no se encuentra en SD!\n");
	          		 DEBUG_OUT(" Enviado petición de escritura de la imagen...\n");

	          		 peticion = 0x13;

	          		 usb_send_data(1,EP1_SEND_BUF_ADDRESS,&peticion,1);

	                  device_status.EP1_Transfer_Timeout  = alt_nticks() + alt_ticks_per_second()*1; // 2s TimeOut if host do not responds
	                  device_status.bEP1_Transfer_Judge   = TRUE;

	                  if(alt_nticks()>device_status.EP1_Transfer_Timeout &&  device_status.bEP1_Transfer_Judge == TRUE && device_status.bEP1InTransfer == TRUE){
	                 	   device_status.bEP1InTransfer = FALSE;
	                 	   device_status.bEP1_Transfer_Judge = FALSE;
	                        DEBUG_OUT("Host PC not responds ,TimeOut!!\n");
	                  }

	          	 }else{
	          		 if(SiAbierto == -2){
	          			DEBUG_OUT(" Error al abrir la imagen, esta ya se encuentra abierta!\n");
	          		 }else{
	          			 DEBUG_OUT(" La imagen 2 ya se encuentra en SD!\n");
	          			 DEBUG_OUT(" Enviado petición de confirmación de imagen...\n");

	          			 peticion = 0x00;

	          			 usb_send_data(1,EP1_SEND_BUF_ADDRESS,&peticion,1);
	          			 device_status.EP1_Transfer_Timeout  = alt_nticks() + alt_ticks_per_second()*1; // 2s TimeOut if host do not responds
	          			 device_status.bEP1_Transfer_Judge   = TRUE;

	          			 if(alt_nticks()>device_status.EP1_Transfer_Timeout &&  device_status.bEP1_Transfer_Judge == TRUE && device_status.bEP1InTransfer == TRUE){
	          			    	   device_status.bEP1InTransfer = FALSE;
	          			       	   device_status.bEP1_Transfer_Judge = FALSE;
	          			           DEBUG_OUT("Host PC not responds ,TimeOut!!\n");
	          			 }
	          		 }
	          	 }
	          	 break;
	          }
	          case IMAGEN4:
	          {  short SiAbierto;
	         	 unsigned char peticion;

	          	 DEBUG_OUT(" Caso: Imagen 3\n");
	          	 SiAbierto = alt_up_sd_card_fopen("p0.bmp", 0);

	          	 if(SiAbierto == -1){

	          		 DEBUG_OUT(" La imagen 3 no se encuentra en SD!\n");
	          		 DEBUG_OUT(" Enviado petición de escritura de la imagen...\n");

	          		 peticion = 0x14;

	          		 usb_send_data(1,EP1_SEND_BUF_ADDRESS,&peticion,1);

	                  device_status.EP1_Transfer_Timeout  = alt_nticks() + alt_ticks_per_second()*1; // 2s TimeOut if host do not responds
	                  device_status.bEP1_Transfer_Judge   = TRUE;

	                  if(alt_nticks()>device_status.EP1_Transfer_Timeout &&  device_status.bEP1_Transfer_Judge == TRUE && device_status.bEP1InTransfer == TRUE){
	                 	   device_status.bEP1InTransfer = FALSE;
	                 	   device_status.bEP1_Transfer_Judge = FALSE;
	                       DEBUG_OUT("Host PC not responds ,TimeOut!!\n");
	                  }

	          	 }else{
	          		 if(SiAbierto == -2){
	          			DEBUG_OUT(" Error al abrir la imagen, esta ya se encuentra abierta!\n");
	          		 }else{
	          			 DEBUG_OUT(" La imagen 3 ya se encuentra en SD!\n");
	          			 DEBUG_OUT(" Enviado petición de confirmación de imagen...\n");

	          			 peticion = 0x00;

	          			 usb_send_data(1,EP1_SEND_BUF_ADDRESS,&peticion,1);
	          			 device_status.EP1_Transfer_Timeout  = alt_nticks() + alt_ticks_per_second()*1; // 2s TimeOut if host do not responds
	          			 device_status.bEP1_Transfer_Judge   = TRUE;

	          			 if(alt_nticks()>device_status.EP1_Transfer_Timeout &&  device_status.bEP1_Transfer_Judge == TRUE && device_status.bEP1InTransfer == TRUE){
	          			    	   device_status.bEP1InTransfer = FALSE;
	          			       	   device_status.bEP1_Transfer_Judge = FALSE;
	          			           DEBUG_OUT("Host PC not responds ,TimeOut!!\n");
	          			 }
	          		 }
	          	 }
	          	 break;
	          }

	          case IMAGEN1_WR:
	          {
	        	  DEBUG_OUT(" Escribiendo imagen 0!\n");
	        	  file_name[1] = "0";
	        	  wrData = 1;
	        	  imagenWr = 0;
	          	 break;
	          }

	          case IMAGEN2_WR:
	          {
	        	  DEBUG_OUT(" Escribiendo imagen 1!\n");
	        	  file_name[1] = "1";
	        	  wrData = 1;
	        	  imagenWr = 1;
	        	  break;
	          }

	          case IMAGEN3_WR:
	          {
	        	  DEBUG_OUT(" Escribiendo imagen 2!\n");
	        	  file_name[1] = "2";
	        	  wrData = 1;
	        	  imagenWr = 2;
	          	 break;
	          }

	          case IMAGEN4_WR:
	          {
	        	  DEBUG_OUT(" Escribiendo imagen 3!\n");
	        	  file_name[1] = "3";
	        	  wrData = 1;
	        	  imagenWr = 3;
	          	 break;
	          }

	         default :
	         {  DEBUG_OUT("Unknow Rx transfer type[0x%02X] !\n",Rx_type);
	          break;
	          }
	      }



   }else{
	   if((count == 3001) && (imagenWr == 0)){
		   DEBUG_OUT(" 0 escrita!\n");
		   wrData = 0;
		   count = 0;
	   }
	   if((count == 3002) && (imagenWr == 1)){
		   DEBUG_OUT(" 1 escrita!\n");
	   		wrData = 0;
	   		count = 0;
	   	}
	   if((count == 3002) && (imagenWr == 2)){
		    DEBUG_OUT(" 2 escrita!\n");
		   	wrData = 0;
	   	   	count = 0;
	   }
	   if((count == 3002) && (imagenWr == 3)){
		   DEBUG_OUT(" 3 escrita!\n");
		   wrData = 0;
	   	   	count = 0;
	   }
	   hpi_read_words(EP2_RECEIVE_BUF_ADDRESS,buf,EP2_DATA_DEFAULT_LEN);
	   count++;

   }

 
 }
